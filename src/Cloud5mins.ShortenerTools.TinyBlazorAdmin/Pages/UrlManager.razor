@page "/urlmanager"

@using Cloud5mins.ShortenerTools.Core.Domain
@using Cloud5mins.ShortenerTools.Core.Messages;
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.Net
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "admin")]

<PageTitle>Url Manager</PageTitle>

<h1>SNSBits Urls Manager</h1>
<h3>Create, Edit, Achives your URLs</h3>

@if (urls.UrlList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateShortUrl">Add New Url</button>

    <SfGrid DataSource="@urls.UrlList" id="grdUrls" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridColumns>
            <GridColumn Width="70" AllowFiltering="false" >
                <Template>
                    @{
                    var url = (context as ShortUrlEntity);
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => CopyToClipboardAsync(url.ShortUrl))">Copy</button>
                }
            </Template>
        </GridColumn>
        <GridColumn  Width="105" HeaderText="Schedule(s)">
            <Template>
                @{
                    var url = (context as ShortUrlEntity);
                    if (url.Schedules != null)
                    {
                        <span>@url.Schedules.Count</span>
                    }
                    else
                    {
                        <span>0</span>
                    };
                }
            </Template>
        </GridColumn>
        <GridColumn Width="250" Field=@nameof(ShortUrlEntity.RowKey) HeaderText="Vanity">
            <Template>
                @{
                    var url = (context as ShortUrlEntity);
                    <a href="@url.ShortUrl" target="blank">@url.RowKey</a>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(ShortUrlEntity.Title) HeaderText="Title"></GridColumn>
        <GridColumn Field=@nameof(ShortUrlEntity.Url) HeaderText="Url"></GridColumn>
        <GridColumn Width="100" TextAlign="TextAlign.Right" Field=@nameof(ShortUrlEntity.Clicks) HeaderText="Clicks">
            <Template>
                @{
                    var url = (context as ShortUrlEntity);
                    <span>@url.Clicks</span>
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() =>
                        NavigateToStats(url.RowKey))">ðŸ“Š</button>
                }
            </Template>
        </GridColumn>
        <GridColumn Width="120">
            <Template>
            @{
            var url = (context as ShortUrlEntity);
            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditShortUrl(url))">Edit</button>
            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => ArchiveShortUrl(url))">Archive</button>
            }
            </Template>
            </GridColumn>
    </GridColumns>
</SfGrid>
}


@if (ShowCreatePopup)
{
    <div class="modal fade show" id="createPopup" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Short Url Request</h4>
                <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <EditForm Model="shortUrlRequest" OnValidSubmit="SaveShortUrl">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="title" Placeholder="Title" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Title"></SfTextBox>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="url" Placeholder="Url" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Url"></SfTextBox>
                            <ValidationMessage For="@(() => shortUrlRequest.Url)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <SfTextBox id="vanity" Placeholder="Vanity" FloatLabelType="@FloatLabelType.Auto"
                                @bind-Value="shortUrlRequest.Vanity"></SfTextBox>
                        </div>
                    </div>

                    <div>
                        <SchedulesComponent schedules="shortUrlRequest.Schedules"></SchedulesComponent>
                    </div>
                </EditForm>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick=@SaveShortUrl>Save</button>
            </div>

        </div>
    </div>
</div>

}


@if (ShowEditPopup)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm action</h4>
                    <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <EditForm Model="editedUrl" OnValidSubmit="SaveUpdatedShortUrl">
                        <DataAnnotationsValidator />
                        <div>
                            <label for="edit-title">Title</label>
                            <InputText id="edit-title" class="form-control" placeholder="Title or description for this URL" @bind-Value="editedUrl.Title" />
                            <ValidationMessage For="@(() => editedUrl.Title)" />
                        </div>
                        <br />
                        <div>
                            <label for="edit-url">The Url to redirect</label>
                            <InputText id="edit-url" class="form-control" placeholder="The Url to redirect" @bind-Value="editedUrl.Url" />
                            <ValidationMessage For="@(() => editedUrl.Url)" />
                        </div>
                        <div>
                            <SchedulesComponent schedules="@editedUrl.Schedules"></SchedulesComponent>
                        </div>
                    </EditForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@SaveUpdatedShortUrl>Save</button>
                </div>

            </div>
        </div>
    </div>

} 

@code {
    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    private ListResponse urls = new ListResponse();
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl;
    SfGrid<ShortUrlEntity> grdUrls;
    public List<ShortUrlEntity> gridData { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await RefreshGrid();
    }

    private async Task RefreshGrid()
    {
        try
        {
            using var response = await Http.GetAsync("/api/UrlList");
            if(response.IsSuccessStatusCode){
                urls = await response.Content.ReadFromJsonAsync<ListResponse>();    
            }
            else{
                switch (response.StatusCode)
                {
                    case HttpStatusCode.Unauthorized: NavigationManager.NavigateTo("/unauthorized"); 
                        break;
                    default: NavigationManager.NavigateTo("/404"); 
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task UpdateUIList()
    {
        await RefreshGrid();
        StateHasChanged();
    }
    private async Task SaveShortUrl()
    {
        ShowCreatePopup = false;

        try
        {
            await Http.PostAsJsonAsync<ShortUrlRequest>("/api/UrlCreate", shortUrlRequest);
            await UpdateUIList();
            @* await grdUrls.ClearFilteringAsync();
                await grdUrls.FilterByColumnAsync("RowKey", "equal", shortUrlRequest.Vanity); *@
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
    }

    [Authorize(Roles = "admin")]
    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }


    void EditShortUrl(ShortUrlEntity urlEntity)
    {
        editedUrl = urlEntity;
        ShowEditPopup = true;
    }

    private async Task SaveUpdatedShortUrl()
    {
        ShowEditPopup = false;
        await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlUpdate", editedUrl);
        await UpdateUIList();
    }

    private void NavigateToStats(string vanity){
        NavigationManager.NavigateTo("/Statistics/" + vanity);
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlArchive", urlEntity);
        await UpdateUIList();
    }

}
